plugins {
    id 'com.android.library'
}

description 'web3j integration tests'

android {
    namespace 'com.org.web3j'
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }
        test {
            java.srcDirs = ['src/test/java']
        }
    }
}


repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://hyperledger.jfrog.io/artifactory/besu-maven/" }
    maven { url "https://artifacts.consensys.net/public/maven/maven/" }
    maven { url "https://splunk.jfrog.io/splunk/ext-releases-local" }
}
ext {
    besuPluginVersion = '24.1.1'
    besuInternalVersion = '24.1.1'
    besuInternalCryptoVersion = '23.1.3'
    besuCryptoDepVersion = '0.8.3'
}

def withoutAbi = { exclude group: 'org.web3j', module: 'abi' }

dependencies {
    testImplementation project(':core')
    testImplementation project(':besu')
    testImplementation project(':parity')
    testImplementation project(':geth')
    testImplementation project(':codegen')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation "ch.qos.logback:logback-core:$logbackVersion"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    testImplementation "com.carrotsearch:junit-benchmarks:$junitBenchmarkVersion"
    testImplementation("org.web3j:web3j-unit:$web3jUnitVersion") {
        // We dont want to pull the web3j version from unit
        exclude group: 'org.web3j'
    }
    testImplementation "org.hyperledger.besu:plugin-api:$besuPluginVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:besu:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:api:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:config:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:core:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:crypto:$besuInternalCryptoVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:rlp:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:kvstore:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:metrics-core:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:trie:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu.internal:util:$besuInternalVersion",withoutAbi
    testImplementation "org.hyperledger.besu:bls12-381:$besuCryptoDepVersion",withoutAbi
    testImplementation "org.hyperledger.besu:secp256k1:$besuCryptoDepVersion",withoutAbi
}


tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties = [
            'junit.jupiter.extensions.autodetection.enabled': 'true',
            'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
    ]
}

sourceSets {
    test {
        java {
            srcDir "$rootDir/codegen/build/resources/test/java"
        }
    }
}


//compileTestJava {
//    dependsOn project(':codegen').getTasksByName("testClasses", false)
//}

//tasks.named("spotlessJava").configure { dependsOn("compileTestJava","spotlessGroovyGradle","processTestResources") }
//tasks.named("spotlessKotlin").configure { dependsOn("compileTestJava","spotlessJava", "spotlessGroovyGradle","processTestResources") }
