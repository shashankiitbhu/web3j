
plugins {
    id 'java-library'
    id 'application'
}
description 'web3j project code generators'

dependencies {
    // Separate each dependency into its own line
    implementation project(':core')
    implementation "com.squareup:kotlinpoet:$kotlinPoetVersion"
    implementation "com.squareup:javapoet:$javaPoetVersion"
    implementation "info.picocli:picocli:$picocliVersion"

    // Test dependencies
//    testImplementation project(':core').sourceSets.androidTest.output
    testImplementation "ch.qos.logback:logback-core:$logbackVersion"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"

    // JUnit dependencies
    implementation "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
    implementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    implementation "org.junit.vintage:junit-vintage-engine:$junitVersion"
}


file("src/test/resources/solidity").listFiles().each { File file ->
    def contractFile = file.listFiles().find({
        it.getName().endsWith(".sol")
    })
    if (contractFile != null) {
        def contractName = contractFile.name.substring(0, contractFile.name.length() - 4)
        def generateTask = tasks.register("generate${contractName}Wrapper", JavaExec) {
            classpath = sourceSets.test.runtimeClasspath
            main = 'org.web3j.codegen.SolidityFunctionWrapperGenerator'
            args = [
                'generate',
                '--abiFile',
                "${contractFile.parent}/build/${contractName}.abi",
                '--binFile',
                "${contractFile.parent}/build/${contractName}.bin",
                '--outputDir',
                'build/resources/test/java',
                '--package',
                'org.web3j.test.contract'
            ]
        }
        test.dependsOn generateTask
    }
}

tasks.named("spotlessJava").configure {
    dependsOn("spotlessGroovyGradle", "compileJava", "compileTestJava", "test", "jacocoTestReport")
}

tasks.named("spotlessKotlin").configure {
    dependsOn("compileJava", "spotlessJava", "spotlessGroovyGradle", "compileTestJava", "processTestResources", "test", "jacocoTestReport")
}
